#!/bin/bash

set -e -o pipefail
shopt -s inherit_errexit

die() {
	echo >&2 "ERROR: $@"
	exit 1
}

usage() {
	cat >&2 <<EOF
Compose crop geometry string for "convert -crop"

Usage:
	$(basename "$0") left% right% top% bottom% input-file-name
where
	"left", "right", "top", and "bottom" (in this order) are percentages
	of the image to crop from the respective sides of the image. Range of
	values is from 0 to 99.99%, with up to 2 digits after the decimal point.
	Percent symbol '%' is optional.
Example:
	$(basename "$0") 19.33 2 3 40% input.pgm
EOF
	exit 1
}

# check parameters
[ $# -eq 5 ] || usage

input_file="$5"

# input image dimensions
read w h < <(identify -format "%w %h\n" "$input_file")

# read crop values
read_param() {
	local -r param_re='^[0-9]{1,2}(\.[0-9]{,2})?%?$'	# values from 0 to 99.99%

	[[ "$2" =~ $param_re ]] || die "Invalid value for \"$1\": $2"

	case "$1" in
		# https://stackoverflow.com/questions/26861118/rounding-numbers-with-bc-in-bash
		top | bottom)	bc <<< "scale = 2; x = 0.5 + ($h * $2) / 100; scale = 0; x / 1" ;;
		left | right)	bc <<< "scale = 2; x = 0.5 + ($w * $2) / 100; scale = 0; x / 1" ;;
		*) 				die "Unknown image side: \"$1\"" ;;
	esac
}

l=$(read_param "left" "$1")
r=$(read_param "right" "$2")
t=$(read_param "top" "$3")
b=$(read_param "bottom" "$4")

# check for empty image
[ $((t + b)) -lt $h -a $((l + r)) -lt $w ] || exec echo "1x1-10-10"	# empty image with warning from `convert`

# finally, compose the string
echo "$(($w - $l - $r))x$(($h - $t - $b))+$l+$t"

# Example command:
#	convert input_file +repage -crop "$(crop-geometry 10 10 10 10 input-file)" +repage $output_file

