#!/usr/bin/env bash

# BSD 3-Clause License

# Copyright (c) 2017,2018,2019,2020, Maxim Konakov
# All rights reserved.

# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:

# * Redistributions of source code must retain the above copyright notice, this
#   list of conditions and the following disclaimer.

# * Redistributions in binary form must reproduce the above copyright notice,
#   this list of conditions and the following disclaimer in the documentation
#   and/or other materials provided with the distribution.

# * Neither the name of the copyright holder nor the names of its
#   contributors may be used to endorse or promote products derived from
#   this software without specific prior written permission.

# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.


# The script converts each page from the input .pdf or .djvu file to a grayscale
# PGM image with 600 dpi resolution.

# defaults
FIRST_PAGE=1
LAST_PAGE=9999
WORK_DIR=.

# display usage string and exit
exit_with_usage() {
	cat <<-EOF >&2
	Usage: $(basename "$0") [OPTION]... FILE
	Renders pages of a .pdf or .djvu FILE to grayscale images in PGM format.
	Options:
	  -f N     first page number (optional, default: 1)
	  -l N     last page number (optional, default: last page of the document)
	  -o DIR   output directory (optional, default: .)
	  -h       display this help and exit
	EOF

	exit 1
}

# error exit
die() {
	echo >&2 "$0: $*"
	exit 1
}

# error exit with message prefix cut off
die_() {
	die "$(cut -d ' ' -f 2- <<< "$*")"
}

# ensure integer argument
ensure_int_arg() {
	[[ "$2" =~ ^[1-9][0-9]*$ ]] || die "invalid parameter \"$2\" for option -$1"
}

# ensure correct filesystem type
ensure_fs_type() {
	T="$(stat -L -c %F "$2" 2>&1)" || die_ "$T"
	[[ "$1" == "$T" ]] || die "\"$2\" is a $T, not a $1"
}

# options
(( $# > 0 )) || exit_with_usage

while getopts "f:l:o:h" OPT
do
	case $OPT in
		f)	ensure_int_arg "$OPT" "$OPTARG"
			FIRST_PAGE="$OPTARG"
			;;
		l)	ensure_int_arg "$OPT" "$OPTARG"
			LAST_PAGE="$OPTARG"
			;;
		o)	ensure_fs_type "directory" "$OPTARG"
			WORK_DIR="$OPTARG"
			;;
		h)	exit_with_usage
			;;
		\?)	exit 1
			;;
	esac
done

shift $(( OPTIND - 1 )) # remove parsed options and args from $@ list

# check range of pages
(( FIRST_PAGE <= LAST_PAGE )) || die "invalid range of pages: $FIRST_PAGE..$LAST_PAGE"

# input file
case $# in
	1)	INPUT_FILE="$1"
		;;
	0)	die "input file is not specified"
		;;
	*)	die "cannot process multiple input file"
		;;
esac

# check input file availability and MIME type
FILE_TYPE="$(file -ELb --mime-type "$INPUT_FILE")" || die_ "$FILE_TYPE" # because 'file' prints errors to stdout

# finally, do the conversion
case "$FILE_TYPE" in
	'application/pdf')
		exec pdftoppm -gray -r 600 -f "$FIRST_PAGE" -l "$LAST_PAGE" "$INPUT_FILE" "$WORK_DIR/page"
		;;
	'image/vnd.djvu')
		exec ddjvu -format=pgm -mode=black -scale=600 -eachpage \
			-page="$FIRST_PAGE-$LAST_PAGE" "$INPUT_FILE" "$WORK_DIR/page-%04d.pgm"
		;;
	*)	die "unsupported input file MIME type: $FILE_TYPE"
		;;
esac
