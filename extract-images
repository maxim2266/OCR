#!/usr/bin/env bash

# BSD 3-Clause License

# Copyright (c) 2017, Maxim Konakov
# All rights reserved.

# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:

# * Redistributions of source code must retain the above copyright notice, this
#   list of conditions and the following disclaimer.

# * Redistributions in binary form must reproduce the above copyright notice,
#   this list of conditions and the following disclaimer in the documentation
#   and/or other materials provided with the distribution.

# * Neither the name of the copyright holder nor the names of its
#   contributors may be used to endorse or promote products derived from
#   this software without specific prior written permission.

# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE
# DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE
# FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL
# DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR
# SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER
# CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY,
# OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE
# OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

# version
declare -r VERSION=0.5.0

# helper functions
function _check_program() {
	# https://stackoverflow.com/questions/592620/check-if-a-program-exists-from-a-bash-script
	command -p -v "$@" >/dev/null 2>&1 || { echo "ERROR: Program \"$@\" is not found." >&2 ; exit 1 ; }
}

function _show_usage() {
	cat <<-EOF >&2
	Usage: $0 [OPTION]... FILE
	Extracts images from a scanned pdf or djvu document FILE.
	Options:
	  -f N     first page number (optional, default: 1)
	  -l N     last page number (optional, default: last page of the document)
	  -o DIR   working directory (mandatory)
	  -h       display this help and exit
	  -v       output version information and exit
	EOF
}

function _ddjvu_exit() {
	head -q -n 1 "$1" | sed 's/^ddjvu:[[:space:]]*\[[^]]*\]/ddjvu:/g' >&2
	exit 1
}

# options
while getopts "f:l:o:vh" opt
do
	case $opt in
		f)	case $OPTARG in
				''|*[!0-9]*)	echo "Invalid parameter for -$opt option: $OPTARG" >&2 ; exit 1 ;;
				*)				FIRST_PAGE=$OPTARG ;;
			esac ;;
		l)	case $OPTARG in
				''|*[!0-9]*)	echo "Invalid parameter for -$opt option: $OPTARG" >&2 ; exit 1 ;;
				*)				LAST_PAGE=$OPTARG ;;
			esac ;;
		o)	WORK_DIR=$OPTARG ;;
		v)	echo v$VERSION ; exit 1 ;;
		h)	_show_usage ; exit 1 ;;
		\?)	exit 1 ;;
	esac
done

shift $((OPTIND-1)) # remove parsed options and args from $@ list

declare -r FIRST_PAGE=${FIRST_PAGE:-1}
declare -r LAST_PAGE=${LAST_PAGE:-5000}

# input file
case $# in
	1)	declare -r INPUT_FILE=$1
		[[ -f "$INPUT_FILE" ]] || { echo "ERROR: File not found: $INPUT_FILE" >&2 ; exit 1 ; } ;;

	0)	printf "ERROR: Input file is not specified\n\n" >&2 ; _show_usage ; exit 1 ;;
	*)	echo "ERROR: Cannot process more than one input file: $@" >&2 ; exit 1 ;;
esac

# working directory
if [[ -z "$WORK_DIR" ]]
then
	echo "ERROR: Output directory is not specified" >&2
	exit 1
fi

declare -r WORK_DIR=$(echo $WORK_DIR | sed 's:/*$::')	# remove all trailing slashes

if [[ -z "$WORK_DIR" ]]
then
	echo "ERROR: Invalid name for working directory" >&2
	exit 1
elif [[ ! -d "$WORK_DIR" ]]	# create if does not exists
then
	mkdir "$WORK_DIR" || exit 1
else	# clear if not empty
	find "$WORK_DIR" -maxdepth 1 -type f \( -name \*.tif -o -name ddjvu-error \) -delete
fi

# extract images
case "${INPUT_FILE##*.}" in
	PDF|pdf)	# pdfimages
		_check_program pdfimages

		if [[ -z $(pdfimages --help 2>&1 | grep -E '^\s+\-tiff\s+') ]]
		then
			echo "ERROR: Current version of \"pdfimages\" does not support .tiff output format" >&2
			exit 1
		fi

		pdfimages -tiff -f $FIRST_PAGE -l $LAST_PAGE "$INPUT_FILE" "$WORK_DIR/img" || exit 1 ;;

	djvu)	# ddjvu
		_check_program ddjvu

		ddjvu -format=tiff -mode=black -eachpage -page=$FIRST_PAGE-$LAST_PAGE "$INPUT_FILE" "$WORK_DIR/img-%05d.tif" 2>"$WORK_DIR/ddjvu-error" \
		|| _ddjvu_exit "$WORK_DIR/ddjvu-error"

		rm "$WORK_DIR/ddjvu-error" ;;

	*)	# error
		echo "ERROR: Unsupported file type: $INPUT_FILE" >&2 ; exit 1 ;;
esac

# check if anything has been extracted
if [[ -z $(find "$WORK_DIR" -maxdepth 1 -type f -name \*.tif) ]]
then
	echo "ERROR: No images extracted, something must have gone wrong" >&2
	exit 1
fi


